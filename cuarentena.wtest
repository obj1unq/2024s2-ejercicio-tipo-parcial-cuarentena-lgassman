import cuarentena.*

describe "cuerantena" {

	// Objetos iniciales
            	 
	//Pandemia 
	//	var pandemia = new Pandemia(fase=4)//TODO: construir/obtener una pandemia pandemia en fase 4

    //Trabajos	
		var programadore = new TrabajoNoEsencial(base=80000, bono=20000, fasePermitida=3)//TODO: construir/obtener un trabajo normal con base=80000, bono=20000 y fase permitida=3
		var docente = new TrabajoNoEsencial(base=15000, bono=2000, fasePermitida=5)// TODO: construir/obtener un trabajo normal con base=15000, bono=2000 y fase permitida=5
		var medique = new TrabajoSanitario(base=60000, bono=40000) // TODO: construir/obtener un trabajo sanitario con base=60000 y bono=40000
		var panadere = new TrabajoEsencial(base=30000, bono=20000) // TODO construir/obtener un trabajo esencial con base=30000 y bono=20000
		
    //Personas
		var milena = new Persona(edad=25, enfermedadesPreexistentes=true, trabajos=#{programadore, docente}) //TODO: construir/obtener una persona con trabajos de programadore y docente. Tiene enfermedades preexistentes y edad=25
		var nicolas = new Persona( edad=17, enfermedadesPreexistentes=false, trabajos=#{panadere})//TODO: construir/obtener una persona con trabajo panadere, no tiene enfermedadesPreexistentes y edad=17
		var mirta = new Persona(edad=67, enfermedadesPreexistentes=false, trabajos=#{medique}) //TODO:  construir/obtener una persona con trabajo medique, not tiene enfermedadesPreexistentes  y edad=67
		
    //Familia
		var perezGarcia = new Familia(integrantes=#{milena, nicolas, mirta})

    method initialize(){
        pandemia.fase(4)
    }


 	
	test "punto 1.1: ganancia de persona" {
		//TODO: verificar que milena gana 115000 
        assert.equals(115000, milena.ganancias())
		//TODO: verificar que nicolas gana 35000 
        assert.equals(35000, nicolas.ganancias())
		//TODO: verificar que mirta gana 75000 
        assert.equals(75000, mirta.ganancias())
	}

  

 	
	test "punto 1.2: ganancia de familia" {
		//TODO: verficiar que la familia perezGarcia gana  225000 
        assert.equals(225000, perezGarcia.ganancias())
	}


 
	test "punto 1.3: miembros en riesgos" {
		//TODO: verificar que la familia perezGarcia NO est√° aislada 
        assert.notThat(perezGarcia.aislada())
		
        const familiaDeSoloMirta = new Familia(integrantes=#{mirta})//TODO: construir/obtener una Familia con mirta como unica integrante
		assert.that(familiaDeSoloMirta.aislada())
	}

	test "punto 1.4: trabajos principales" {
		//TODO: verificar que los trabajos principales de la familia perezGarcia sean programadore, panadere y medique
        assert.equals(#{programadore, panadere, medique}, perezGarcia.trabajosPrincipales())
	}

 
	test "punto 1.5: trabajadores inactivos" {
		//TODO: verificar que no hay integrantes inactivos de la familia perezGarcia 
        assert.that(perezGarcia.inactivos().isEmpty())
		//TODO: cambiar la pandemia a fase 1 
        pandemia.fase(1)
		//TODO verificar que milena es la unica trabajadora inactiva de la familia perezGarcia
        assert.equals(#{milena}, perezGarcia.inactivos())
	}

	
 		
	test "punto 2.1: puede realizar salida" {
		 		
		//TODO: verificar que mirta NO puede salir a comprar



        assert.notThat( salidaComprar.puedeHacer(mirta))

        assert.that( salidaComprar.puedeHacer(nicolas))
        assert.that( salidaEjercicio.puedeHacer(nicolas))
        assert.that( salidaCaminar.puedeHacer(nicolas))
        assert.that( salidaTrabajar.puedeHacer(nicolas))

		//TODO: verificar que nicolas SI puede salir a comprar
		//TODO: verificar que nicolas SI puede salir a ejercitarse
		//TODO: verificar que nicolas SI puede salir a caminar
		//TODO: verificar que nicolas SI puede salir a trabajar
		
        pandemia.fase(3)
		//TODO: pasar la pandemia a fase 3

        assert.that( salidaComprar.puedeHacer(nicolas))
        assert.notThat( salidaEjercicio.puedeHacer(nicolas))
        assert.notThat( salidaCaminar.puedeHacer(nicolas))
        assert.that( salidaTrabajar.puedeHacer(nicolas))

		//TODO: verificar que nicolas SI puede salir a comprar
		//TODO: verificar que nicolas NO puede salir a ejercitarse
		//TODO: verificar que nicolas NO puede salir a caminar
		//TODO: verificar que nicolas SI puede salir a trabajar
		
	}

 	
	test "punto 2.2, 2.3 y 2.4.1: salir a pasear ok " {
		//TODO hacer que nicolas salga a comprar
		//TODO hacer que nicolas salga a trabajar
		//TODO hacer que nicolas salga a comprar 
		//TODO verificar que las salidas de nicolas son salirAComprar, salirATrabajar y salirAComprar
        
        nicolas.salir(salidaComprar)
        nicolas.salir(salidaTrabajar)
        nicolas.salir(salidaComprar)

        assert.equals([salidaComprar, salidaTrabajar, salidaComprar], nicolas.salidas())
       
    }

 
	test "punto 2.2, 2.3 y 2.4.2: salir a pasear no ok" {
		assert.throwsException({milena.salir(salidaComprar)})
		//TODO verificar que milena no tenga salidas
        assert.that(milena.salidas().isEmpty())
	}
	

 
	test "punto 3.1: Salida familiar ok" {

		// TODO: hacer que perezGarcia salga a comprar 
        perezGarcia.salir(salidaComprar)

        assert.equals( [salidaComprar],  nicolas.salidas())
        assert.equals( [],  mirta.salidas())
        assert.equals( [],  milena.salidas())
	}

 
	test "punto 3.1: Salida familiar no ok" {
		const familiaMirtaYMilena = new Familia(integrantes=#{mirta, milena})
		//TODO: hacer que la familiaMirtaYMilena salga a comprar (no se puede!)
        assert.throwsException({familiaMirtaYMilena.salir(salidaComprar)})

		//TODO: verificar que mirta no tenga salidas
		//TODO: verificar que milena no tenga salidas
        assert.equals( [],  mirta.salidas())
        assert.equals( [],  milena.salidas())
	}
	
	
}
